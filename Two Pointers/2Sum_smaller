'''
Similar to the regular 3Sum problem
Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]

Important:
since the list is sorted, if index a1, a2 and a3 works, index (a1, a2, a3-1) ... (a1,a2,a2+1) also work!
ans += (a3 - a2)

Time complexity O(n^2)
'''


class Solution:
    def threeSumSmaller(self, nums: List[int], target: int) -> int:
        nums.sort()
        ans = 0
        for i in range(len(nums)):
            lo = i + 1
            hi = len(nums) - 1
            while(lo < hi):
                mySum = nums[i] + nums[lo] + nums[hi]
                if mySum >= target:
                    hi -= 1
                else:
                    ans += (hi - lo)
                    lo += 1
        return ans
